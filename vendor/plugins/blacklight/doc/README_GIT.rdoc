=Contributing to Blacklight
So you've found a bug you want to fix, or a feature you want to implement, thanks! If you follow this guide it will make it much easier for the community to review your changes, and the core team to get them included in the next release. If you need an introduction to git, check out the tutorial:http://www.kernel.org/pub/software/scm/git/docs/tutorial.html and every day git in 20 commands or so:http://www.kernel.org/pub/software/scm/git/docs/everyday.html

==Making Your Changes

The first thing you need to do is obtain a clone of the Blacklight repository

  git git://github.com/projectblacklight/blacklight.git
  cd blacklight

Then you need to create your new branch:

  git checkout -b make_blacklight_scale
  # Switched to a new branch "make_blacklight_scale"

Now you're ready to get hacking. Be sure to include tests which demonstrate the bug you're fixing, and fully exercise any new features you're adding. You should also take care to make sure the documentation is updated if you're changing the API. This includes updating API docs and guides. Once you've finished making your changes you need to commit them.

  git commit -a -m "I made blacklight scale by adding magic beans"
  # Created commit 29f8baa: I made blacklight scale by adding magic beans
  # 1 files changed, 0 insertions(+), 1 deletions(-)

==Preparing your changes for submission.

Now that you've made your changes it's time to get them into a patch. We need to update Blacklight and fix any conflicts we had.

  git checkout master
  # Switched to branch "master"
  git pull
  # ... 
  git checkout make_blacklight_scale
  # Switched to branch "make_blacklight_scale"
  git rebase master

Once you've fixed any conflicts, you're ready to create a patch:

  git format-patch master --stdout > your-patch-file.diff

Now you can attach that patch file to a Jira ticket: http://jira.projectblacklight.org and add the 'patch' tag. Once you have a patch and a Jira ticket you need to find some people to give you feedback. You can either email the core list or ask in #blacklight on irc.freenode.net

==Reviewing Changes

To apply someone's changes you need to first create a branch:

  git checkout -b they_made_blacklight_scale

Then you can apply their patch

  git am < their-patch-file.diff

==GitHub Pull Requests
You can also fork Blacklight using GitHub. After you've created a fork, made your changes and tests, you can send a "pull request" to the "projectblacklight" team. A good overview for how to do this can be found here: http://help.github.com/forking

The steps for a core-developer to merge a fork goes something like this. Let's say we have a github user, "sam" and the fork/branch that "sam" wants us to pull from is called "superduper". Here are the basic steps to get that branch merged in to your local blacklight:

  cd blacklight
  git checkout master
  git pull
  git remote add -f sam git://github.com/sam/blacklight.git
  git checkout -b sam/superduper
  git pull sam superduper
  rake solr:spec
  rake solr:features
  git commit
  git checkout master
  git merge sam/superduper
  rake solr:spec
  rake solr:features
  # git push <- make sure all tests are passing, and the patch has been approved

Once you have a working copy, you should take note of the following kinds of things:

* Are you happy with the tests, can you follow what they're testing, is there anything missing
* Does the documentation still seem right to you
* Do you like the implementation, can you think of a nicer or faster way to implement a part of their change

Once you're happy it's a good change, comment on the Jira ticket indicating your approval. Your comment should indicate that you like the change and what you like about it. Something like:

1. I like the way you've restructured that code in generate_finder_sql, much nicer. The tests look good too.

If your comment simply says +1, then odds are other reviewers aren't going to take it too seriously. Show that you took the time to review the patch. Once three people have approved it, add the verified tag. This will bring it to the attention of a committer who'll then review the changes looking for the same kinds of things.

Congratulations and Thank You!

Once your changes have been applied, you've officially become part of the large community of independent contributors working to improve Blacklight.

==Important Notes

* Blacklight core team prefers that you create a github fork only for large changesets which are likely to involve a lot of code reviews/changes back and forth, or if 2 or more people are working on the same feature/bug. Docrails and Rack on Rails are good examples of cases where forks are preferable over git formatted patches. But of course, like all the rules, exceptions can be made for cases that demands for it.



=Branching and Merging
==Overview
===master
Blacklight uses branches in a couple of different ways. First, the "master" branch is the current, "bleeding-edge" branch, similar to a "trunk" in Subversion. This is normally the branch that will become the next major version.

===Release Versioning
Blacklight uses a "<VERSION>-stable" naming format for creating version based branches. These branches represent a set of features defined by a Blacklight software "roadmap". Tags are then created for individual releases, based on the branch name.

===Development branches
A developer can create any number of arbitrary branches for development. For example, if I needed to update the way Blacklight creates and reads facet URL parameters, I'd create a new branch called "better-facet-url-params" and make my changes there. At some later point, I'd merge those changes into the master branch.

==Branch and tag naming conventions
===Branches
A branch for a major version will use the following naming scheme: <VERSION>-stable. This is the base branch that the release tags will be created from. Continuing development for this branch will depend on the "roadmap" and/or version-related bug fixes. For example, when Blacklight moves to version 2.5, the branch name would be "2.5-stable".

===Tags
Tags will use the following naming scheme: v<BRANCH-VERSION.MINOR>. For example, the first release tag of 2.5 would be "v2.5.0". The next release of 2.5 would be tagged "v2.5.1".

==Creating, removing and merging branches
===Creating
In order to create a new branch, you'll need to have a local copy of the Blacklight master branch with commit rights. You'll need to be a "committer" and a member of the projectblacklight/blackight repo on github.

If don't already have a local copy, run git-clone:
  git clone git@github.com:projectblacklight/blacklight.git

If you already have a copy, make sure it's up-to-date:
  git status
  # evaluate your local changes
  # commit
  git commit -a -m 'your message'
  # push to master
  git push origin master
  # pull from master
  git pull origin master

To see a list of existing branches, use git-branch:
  git branch

The branch marked with a * will be your active local branch.

To create a new local branch, use git-branch:
  git branch <branch-name>

Now you can checkout your new branch with git-checkout:
  git checkout <branch-name>

This is the time to start making your changes/committing: make change, run "git commit -a -m 'comment-here'". Rinse and repeat. You will be committing to your local branch.

Once you're ready to push your new branch, use git-push:
  git push origin <branch-name>

... that will push the branch to the remote origin.

===Removing
If you decide that you don't want to push your changes and would rather forget the whole thing, you can remove the local branch by using git-branch:
  git branch -d <branch-name>

To force delete a local branch:
  git branch -D <branch-name>

If you've already pushed the branch to the remote repo, you can remove the remote branch by using git-push (notice the colon before "heads"):
  git push origin :heads/<branch-name>

===Merging
Say you have your new branch working exactly the way you want, and you'd like to push it back into the master branch. First, **please make sure your tests are all passing**:
  rake solr:spec
  rake solr:features

Next, **please add new tests for the code you're adding**.

Once that's all done, commit and push to your branch:
  git commit -a -m 'my new changes'
  git push origin <branch-name>

Time to pull your changes into master. First checkout the master branch:
  git checkout master

Ensure that the master branch is up-to-date with the remote:
  git pull origin master

Merge your branch into the master branch:
  git merge <branch-name>

You can now push your merged changes to the remote master:
  git push origin master

==Tagging
A tag in Git is a reference to a commit at some point in time. Think of a tag as a timeline pointer. We use tags to create "releases". You can also you "local" tags for your own development.

==Release tags
To create a tag for new release, make sure you are in the correct branch by using git-checkout. For example, you want to create a v2.4.1 release:
  git checkout 2.4-stable

Now create the tag:
  git tag -a -m 'tagging for release v2.4.1' v2.4.1

You can see your new tag by using git-tag:
  git tag -l

To push your tag to the remote repo:
  git push origin tag v2.4.1

==Update your tags!
If another developer has created a new tag, you'll need to update your local tags:
  git fetch --tags

==Checkout a tag:
A tag in Git can be checked-out like a branch, so:
  git checkout <tag-name>

==Delete a tag:
To remove a tag from your local repo:
  git tag -d <tag-name>

To remove the tag from the remote origin (note the colon before "refs"):
  git push origin :refs/tags/<tag-name>